diff --git a/homeassistant/components/elkm1/__init__.py b/homeassistant/components/elkm1/__init__.py
index b78157588e..17e77c4969 100644
--- a/homeassistant/components/elkm1/__init__.py
+++ b/homeassistant/components/elkm1/__init__.py
@@ -22,6 +22,7 @@ from homeassistant.const import (
     CONF_INCLUDE,
     CONF_PASSWORD,
     CONF_PREFIX,
+    CONF_CODE,
     CONF_TEMPERATURE_UNIT,
     CONF_USERNAME,
     CONF_ZONE,
@@ -156,6 +157,7 @@ DEVICE_SCHEMA = vol.All(
             vol.Optional(CONF_PREFIX, default=""): vol.All(cv.string, vol.Lower),
             vol.Optional(CONF_USERNAME, default=""): cv.string,
             vol.Optional(CONF_PASSWORD, default=""): cv.string,
+            vol.Optional(CONF_CODE, default=""): cv.string,
             vol.Optional(CONF_AUTO_CONFIGURE, default=False): cv.boolean,
             vol.Optional(CONF_TEMPERATURE_UNIT, default="F"): cv.temperature_unit,
             vol.Optional(CONF_AREA, default={}): DEVICE_SCHEMA_SUBDOMAIN,
@@ -255,6 +257,7 @@ async def async_setup_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:
     if not conf[CONF_AUTO_CONFIGURE]:
         # With elkm1-lib==0.7.16 and later auto configure is available
         config["panel"] = {"enabled": True, "included": [True]}
+        config["code"] = conf[CONF_CODE]
         for item, max_ in ELK_ELEMENTS.items():
             config[item] = {
                 "enabled": conf[item][CONF_ENABLED],
@@ -467,6 +470,7 @@ class ElkEntity(Entity):
         self._mac = elk_data.mac
         self._prefix = elk_data.prefix
         self._temperature_unit: str = elk_data.config["temperature_unit"]
+        self._code = elk_data["config"]["code"]
         # unique_id starts with elkm1_ iff there is no prefix
         # it starts with elkm1m_{prefix} iff there is a prefix
         # this is to avoid a conflict between
diff --git a/homeassistant/components/elkm1/alarm_control_panel.py b/homeassistant/components/elkm1/alarm_control_panel.py
index bfac466cae..e293174572 100644
--- a/homeassistant/components/elkm1/alarm_control_panel.py
+++ b/homeassistant/components/elkm1/alarm_control_panel.py
@@ -198,6 +198,8 @@ class ElkArea(ElkAttachedEntity, AlarmControlPanelEntity, RestoreEntity):
         attrs[ATTR_CHANGED_BY_KEYPAD] = self._changed_by_keypad
         attrs[ATTR_CHANGED_BY_TIME] = self._changed_by_time
         attrs[ATTR_CHANGED_BY_ID] = self._changed_by_id
+        if self._code != "":
+            attrs["code_arm_required"] = False
         return attrs
 
     @property
@@ -240,31 +242,43 @@ class ElkArea(ElkAttachedEntity, AlarmControlPanelEntity, RestoreEntity):
 
     async def async_alarm_arm_home(self, code: str | None = None) -> None:
         """Send arm home command."""
+        if code is None:
+            code = self._code
         if code is not None:
             self._element.arm(ArmLevel.ARMED_STAY, int(code))
 
     async def async_alarm_arm_away(self, code: str | None = None) -> None:
         """Send arm away command."""
+        if code is None:
+            code = self._code
         if code is not None:
             self._element.arm(ArmLevel.ARMED_AWAY, int(code))
 
     async def async_alarm_arm_night(self, code: str | None = None) -> None:
         """Send arm night command."""
+        if code is None:
+            code = self._code
         if code is not None:
             self._element.arm(ArmLevel.ARMED_NIGHT, int(code))
 
     async def async_alarm_arm_home_instant(self, code: str | None = None) -> None:
         """Send arm stay instant command."""
+        if code is None:
+            code = self._code
         if code is not None:
             self._element.arm(ArmLevel.ARMED_STAY_INSTANT, int(code))
 
     async def async_alarm_arm_night_instant(self, code: str | None = None) -> None:
         """Send arm night instant command."""
+        if code is None:
+            code = self._code
         if code is not None:
             self._element.arm(ArmLevel.ARMED_NIGHT_INSTANT, int(code))
 
     async def async_alarm_arm_vacation(self, code: str | None = None) -> None:
         """Send arm vacation command."""
+        if code is None:
+            code = self._code
         if code is not None:
             self._element.arm(ArmLevel.ARMED_VACATION, int(code))
 
